BEGIN EXECUTE IMMEDIATE 'DROP VIEW V_PUBLICACIONES_ACTIVAS'; 
EXCEPTION WHEN OTHERS THEN NULL; //si la vista no existe ignora el error
END;
/

BEGIN EXECUTE IMMEDIATE 'DROP PACKAGE PKG_MERCADO'; 
EXCEPTION WHEN OTHERS THEN NULL; //si la vista no existe ignora el error
END;
/

BEGIN FOR t IN (SELECT table_name FROM user_tables 
WHERE table_name IN (                               //recorre los nombres de las tablas
  'ORDENES','PUBLICACIONES','ARTICULOS','SKINS','MODELOS_ARMA','CATEGORIAS_PRODUCTO',
  'MOVIMIENTOS_BILLETERA','BILLETERA_USUARIO','USUARIOS','REGLAS_COMISION')) LOOP
  EXECUTE IMMEDIATE 'DROP TABLE '||t.table_name||' CASCADE CONSTRAINTS'; //borra cada tabla y sus constraints dependientes
END LOOP; 

END;
/

/* ============================================================================
   CATÁLOGOS
============================================================================ */
CREATE TABLE CATEGORIAS_PRODUCTO(
  ID_CATEGORIA NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  NOMBRE       VARCHAR2(50) NOT NULL UNIQUE   -- RIFLE, PISTOLA, CUCHILLO, GUANTE, ETC.
);

CREATE TABLE MODELOS_ARMA(
  ID_MODELO    NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_CATEGORIA NUMBER NOT NULL REFERENCES CATEGORIAS_PRODUCTO(ID_CATEGORIA),
  NOMBRE       VARCHAR2(80) NOT NULL,
  CONSTRAINT UK_MODELO UNIQUE(ID_CATEGORIA,NOMBRE)
);

CREATE TABLE SKINS(
  ID_SKIN     NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_MODELO   NUMBER NOT NULL REFERENCES MODELOS_ARMA(ID_MODELO),
  NOMBRE      VARCHAR2(100) NOT NULL,   -- p.ej. "Redline", "Fade"
  RAREZA      VARCHAR2(30) NOT NULL,    -- CONSUMER, MIL-SPEC, COVERT, KNIFE, ETC.
  CONSTRAINT UK_SKIN UNIQUE(ID_MODELO,NOMBRE)
);

/* ============================================================================
   USUARIOS + BILLETERA
============================================================================ */
CREATE TABLE USUARIOS(
  ID_USUARIO   NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  USERNAME     VARCHAR2(40)  NOT NULL UNIQUE,
  EMAIL        VARCHAR2(120) NOT NULL UNIQUE,
  PASS_HASH    VARCHAR2(200) NOT NULL,
  PAIS         VARCHAR2(2),
  NIVEL_KYC    NUMBER DEFAULT 0 CHECK(NIVEL_KYC IN(0,1,2)),
  ESTADO       VARCHAR2(15) DEFAULT 'ACTIVO' CHECK(ESTADO IN('ACTIVO','SUSPENDIDO','PENDIENTE')),
  CREADO_EN    TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE BILLETERA_USUARIO(
  ID_USUARIO NUMBER PRIMARY KEY REFERENCES USUARIOS(ID_USUARIO),
  SALDO_CLP  NUMBER(16,0) DEFAULT 0 NOT NULL CHECK(SALDO_CLP>=0) -- pesos chilenos enteros
);

CREATE TABLE MOVIMIENTOS_BILLETERA(
  ID_MOV       NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_USUARIO   NUMBER NOT NULL REFERENCES USUARIOS(ID_USUARIO),
  TIPO         VARCHAR2(20) NOT NULL CHECK(TIPO IN('DEPOSITO','RETIRO','PAGO_COMPRA','ABONO_VENTA','COMISION')),
  MONTO_CLP    NUMBER(16,0) NOT NULL CHECK(MONTO_CLP>=0),
  REF_TX       VARCHAR2(50),
  ESTADO       VARCHAR2(15) DEFAULT 'OK' CHECK(ESTADO IN('OK','PENDIENTE','FALLIDO')),
  CREADO_EN    TIMESTAMP DEFAULT SYSTIMESTAMP
);

/* ============================================================================
   ARTÍCULOS y PUBLICACIONES
============================================================================ */
CREATE TABLE ARTICULOS(
  ID_ARTICULO     NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_SKIN         NUMBER NOT NULL REFERENCES SKINS(ID_SKIN),
  ID_DUENIO       NUMBER NOT NULL REFERENCES USUARIOS(ID_USUARIO),
  DESGASTE        NUMBER(5,4) NOT NULL CHECK(DESGASTE BETWEEN 0 AND 1), -- wear 0..1
  EXTERIOR        VARCHAR2(25) NOT NULL CHECK(EXTERIOR IN('FACTORY NEW','MINIMAL WEAR','FIELD-TESTED','WELL-WORN','BATTLE-SCARRED')),
  ES_STATTRAK     CHAR(1) DEFAULT 'N' CHECK(ES_STATTRAK IN('S','N')),
  ES_SOUVENIR     CHAR(1) DEFAULT 'N' CHECK(ES_SOUVENIR IN('S','N')),
  INDICE_PATRON   NUMBER(4),
  NOMBRE_ETIQUETA VARCHAR2(32)
);
CREATE INDEX IX_ARTICULOS_DUENIO ON ARTICULOS(ID_DUENIO);

CREATE TABLE PUBLICACIONES(
  ID_PUBLICACION NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_ARTICULO    NUMBER NOT NULL REFERENCES ARTICULOS(ID_ARTICULO),
  ID_VENDEDOR    NUMBER NOT NULL REFERENCES USUARIOS(ID_USUARIO),
  PRECIO_CLP     NUMBER(16,0) NOT NULL CHECK(PRECIO_CLP>0),
  ESTADO         VARCHAR2(15) DEFAULT 'ACTIVA' CHECK(ESTADO IN('ACTIVA','VENDIDA','CANCELADA')),
  CREADO_EN      TIMESTAMP DEFAULT SYSTIMESTAMP
);
CREATE INDEX IX_PUB_VENDEDOR_EST ON PUBLICACIONES(ID_VENDEDOR,ESTADO);

CREATE TABLE ORDENES(
  ID_ORDEN      NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_PUBLICACION NUMBER NOT NULL REFERENCES PUBLICACIONES(ID_PUBLICACION),
  ID_COMPRADOR   NUMBER NOT NULL REFERENCES USUARIOS(ID_USUARIO),
  PRECIO_FINAL_CLP NUMBER(16,0) NOT NULL CHECK(PRECIO_FINAL_CLP>0),
  MONTO_COMISION_CLP NUMBER(16,0) NOT NULL CHECK(MONTO_COMISION_CLP>=0),
  COMPLETADA_EN  TIMESTAMP,
  ESTADO         VARCHAR2(15) DEFAULT 'CREADA' CHECK(ESTADO IN('CREADA','PAGADA','CANCELADA','REEMBOLSADA'))
);

/* ============================================================================
   COMISIONES
============================================================================ */
CREATE TABLE REGLAS_COMISION(
  ID_REGLA   NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  PORCENTAJE NUMBER(5,2) NOT NULL CHECK(PORCENTAJE BETWEEN 0 AND 100),
  ACTIVA     CHAR(1) DEFAULT 'S' CHECK(ACTIVA IN('S','N')),
  VIGENTE_DESDE DATE NOT NULL,
  VIGENTE_HASTA DATE
);

/* ============================================================================
   VISTA DE MERCADO ACTIVO
   Una vista para consultar publicaciones activas con su descripcion
============================================================================ */
CREATE OR REPLACE VIEW V_PUBLICACIONES_ACTIVAS AS
SELECT p.ID_PUBLICACION, p.PRECIO_CLP, p.CREADO_EN,
       a.ID_ARTICULO, a.DESGASTE, a.EXTERIOR, a.ES_STATTRAK, a.ES_SOUVENIR, a.INDICE_PATRON,
       s.NOMBRE AS NOMBRE_SKIN, s.RAREZA,
       m.NOMBRE AS NOMBRE_MODELO,
       c.NOMBRE AS CATEGORIA,
       p.ID_VENDEDOR
FROM PUBLICACIONES p
JOIN ARTICULOS a ON a.ID_ARTICULO=p.ID_ARTICULO
JOIN SKINS s ON s.ID_SKIN=a.ID_SKIN
JOIN MODELOS_ARMA m ON m.ID_MODELO=s.ID_MODELO
JOIN CATEGORIAS_PRODUCTO c ON c.ID_CATEGORIA=m.ID_CATEGORIA
WHERE p.ESTADO='ACTIVA';

/* ============================================================================
   TRIGGERS
============================================================================ */
-- inserta automaticamente la billetera con saldo 0
CREATE OR REPLACE TRIGGER TRG_USUARIOS_AI
AFTER INSERT ON USUARIOS FOR EACH ROW
BEGIN
  INSERT INTO BILLETERA_USUARIO(ID_USUARIO,SALDO_CLP) VALUES(:NEW.ID_USUARIO,0); 
END;
/

-- Evitar doble publicación ACTIVA del mismo artículo
CREATE OR REPLACE TRIGGER TRG_PUB_AI
BEFORE INSERT ON PUBLICACIONES FOR EACH ROW
DECLARE v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM PUBLICACIONES WHERE ID_ARTICULO=:NEW.ID_ARTICULO AND ESTADO='ACTIVA';
  IF v_cnt>0 THEN RAISE_APPLICATION_ERROR(-20002,'El artículo ya tiene una publicación ACTIVA.'); END IF;
END;
/

/* ============================================================================
   PACKAGE (procedimientos + función) y manejo de excepciones
============================================================================ */

//Declara excepciones personalizadas y las asocia a códigos.
//Declara 2 funciones y 2 procedimientos disponibles para uso.
CREATE OR REPLACE PACKAGE PKG_MERCADO AS
  e_no_duenio EXCEPTION; PRAGMA EXCEPTION_INIT(e_no_duenio,-20001);
  e_pub_inactiva EXCEPTION; PRAGMA EXCEPTION_INIT(e_pub_inactiva,-20003);
  FUNCTION F_PORC_COMISION RETURN NUMBER;
  FUNCTION F_EXTERIOR_DESDE_DESGASTE(p_desgaste NUMBER) RETURN VARCHAR2;
  PROCEDURE P_PUBLICAR_ARTICULO(p_id_vendedor NUMBER, p_id_articulo NUMBER, p_precio_clp NUMBER);
  PROCEDURE P_COMPRAR_PUBLICACION(p_id_comprador NUMBER, p_id_publicacion NUMBER);
END PKG_MERCADO;
/

//Función de comisión
//lee el % vigente (regla activa, por fecha).
//Si no hay regla, retorna 5% por defecto.
CREATE OR REPLACE PACKAGE BODY PKG_MERCADO AS
  FUNCTION F_PORC_COMISION RETURN NUMBER IS v NUMBER(5,2);
  BEGIN
    SELECT PORCENTAJE INTO v
    FROM REGLAS_COMISION
    WHERE ACTIVA='S' AND (VIGENTE_HASTA IS NULL OR VIGENTE_HASTA>=TRUNC(SYSDATE))
    ORDER BY VIGENTE_DESDE DESC FETCH FIRST 1 ROWS ONLY;
    RETURN NVL(v,5);
  EXCEPTION WHEN NO_DATA_FOUND THEN RETURN 5;
  END;

//Devuelve el EXTERIOR estándar según el wear.
  FUNCTION F_EXTERIOR_DESDE_DESGASTE(p_desgaste NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF p_desgaste<0.07 THEN RETURN 'FACTORY NEW';
    ELSIF p_desgaste<0.15 THEN RETURN 'MINIMAL WEAR';
    ELSIF p_desgaste<0.38 THEN RETURN 'FIELD-TESTED';
    ELSIF p_desgaste<0.45 THEN RETURN 'WELL-WORN';
    ELSE RETURN 'BATTLE-SCARRED'; END IF;
  END;

/*Procedimiento para publicar un artículo
Verifica que el vendedor sea dueño del artículo.
Verifica que no esté ya publicado.
Inserta la publicación como ACTIVA*/
  PROCEDURE P_PUBLICAR_ARTICULO(p_id_vendedor NUMBER, p_id_articulo NUMBER, p_precio_clp NUMBER) IS v_duenio NUMBER; v_cnt NUMBER;
  BEGIN
    SELECT ID_DUENIO INTO v_duenio FROM ARTICULOS WHERE ID_ARTICULO=p_id_articulo;
    IF v_duenio<>p_id_vendedor THEN RAISE_APPLICATION_ERROR(-20001,'El usuario no es dueño del artículo.'); END IF;
    SELECT COUNT(*) INTO v_cnt FROM PUBLICACIONES WHERE ID_ARTICULO=p_id_articulo AND ESTADO='ACTIVA';
    IF v_cnt>0 THEN RAISE_APPLICATION_ERROR(-20002,'El artículo ya está publicado.'); END IF;
    INSERT INTO PUBLICACIONES(ID_ARTICULO,ID_VENDEDOR,PRECIO_CLP,ESTADO) VALUES(p_id_articulo,p_id_vendedor,p_precio_clp,'ACTIVA');
  END;

//Procedimiento para comprar una publicación
/*
Bloquea la publicación (FOR UPDATE) para evitar carreras.
Valida estado activo y que el comprador no sea el vendedor.
Valida saldo del comprador.
Calcula comisión con F_PORC_COMISION.
Debita comprador (saldo y movimiento).
Registra comisión (movimiento al vendedor con tipo COMISION).
Abona al vendedor (precio - fee) y registra movimiento.
Transfiere propiedad del artículo y marca publicación VENDIDA.
Crea el registro en ORDENES como PAGADA.*/

  PROCEDURE P_COMPRAR_PUBLICACION(p_id_comprador NUMBER, p_id_publicacion NUMBER) IS
    v_id_articulo NUMBER; v_id_vendedor NUMBER; v_precio NUMBER(16,0); v_estado VARCHAR2(15);
    v_saldo NUMBER(16,0); v_pct NUMBER(5,2); v_fee NUMBER(16,0);
  BEGIN
    SELECT ID_ARTICULO,ID_VENDEDOR,PRECIO_CLP,ESTADO INTO v_id_articulo,v_id_vendedor,v_precio,v_estado
    FROM PUBLICACIONES WHERE ID_PUBLICACION=p_id_publicacion FOR UPDATE;
    IF v_estado<>'ACTIVA' THEN RAISE_APPLICATION_ERROR(-20003,'Publicación no activa.'); END IF;
    IF v_id_vendedor=p_id_comprador THEN RAISE_APPLICATION_ERROR(-20004,'No puedes comprar tu propia publicación.'); END IF;

    SELECT SALDO_CLP INTO v_saldo FROM BILLETERA_USUARIO WHERE ID_USUARIO=p_id_comprador FOR UPDATE;
    IF v_saldo<v_precio THEN RAISE_APPLICATION_ERROR(-20005,'Saldo insuficiente.'); END IF;

    v_pct := F_PORC_COMISION(); v_fee := ROUND(v_precio*v_pct/100);

    UPDATE BILLETERA_USUARIO SET SALDO_CLP=SALDO_CLP-v_precio WHERE ID_USUARIO=p_id_comprador;
    INSERT INTO MOVIMIENTOS_BILLETERA(ID_USUARIO,TIPO,MONTO_CLP,REF_TX) VALUES(p_id_comprador,'PAGO_COMPRA',v_precio,'PUB'||p_id_publicacion);

    INSERT INTO MOVIMIENTOS_BILLETERA(ID_USUARIO,TIPO,MONTO_CLP,REF_TX) VALUES(v_id_vendedor,'COMISION',v_fee,'PUB'||p_id_publicacion);

    UPDATE BILLETERA_USUARIO SET SALDO_CLP=SALDO_CLP+(v_precio - v_fee) WHERE ID_USUARIO=v_id_vendedor;
    INSERT INTO MOVIMIENTOS_BILLETERA(ID_USUARIO,TIPO,MONTO_CLP,REF_TX) VALUES(v_id_vendedor,'ABONO_VENTA',(v_precio - v_fee),'PUB'||p_id_publicacion);

    UPDATE ARTICULOS SET ID_DUENIO=p_id_comprador WHERE ID_ARTICULO=v_id_articulo;
    UPDATE PUBLICACIONES SET ESTADO='VENDIDA' WHERE ID_PUBLICACION=p_id_publicacion;

    INSERT INTO ORDENES(ID_PUBLICACION,ID_COMPRADOR,PRECIO_FINAL_CLP,MONTO_COMISION_CLP,COMPLETADA_EN,ESTADO)
    VALUES(p_id_publicacion,p_id_comprador,v_precio,v_fee,SYSTIMESTAMP,'PAGADA');
  END;
END PKG_MERCADO;
/

/* ============================================================================
   DATOS DE PRUEBA
============================================================================ */
INSERT INTO CATEGORIAS_PRODUCTO(NOMBRE) VALUES('RIFLE');
INSERT INTO CATEGORIAS_PRODUCTO(NOMBRE) VALUES('PISTOLA');
INSERT INTO CATEGORIAS_PRODUCTO(NOMBRE) VALUES('CUCHILLO');
INSERT INTO CATEGORIAS_PRODUCTO(NOMBRE) VALUES('GUANTE');

-- RIFLES
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'M4A1-S' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'M4A4' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'AUG' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'SG 553' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'FAMAS' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Galil AR' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'SCAR-20' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'G3SG1' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'AWP' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'SSG 08' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='RIFLE';

-- PISTOLAS
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'P2000' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'P250' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'CZ75-Auto' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Dual Berettas' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Tec-9' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Desert Eagle' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'R8 Revolver' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='PISTOLA';

-- CUCHILLOS
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Bayonet' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Butterfly Knife' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'M9 Bayonet' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Flip Knife' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Gut Knife' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Huntsman Knife' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Falchion Knife' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Shadow Daggers' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Navaja Knife' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='CUCHILLO';

-- GUANTES
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Moto Gloves' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='GUANTE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Driver Gloves' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='GUANTE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Hand Wraps' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='GUANTE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Specialist Gloves' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='GUANTE';
INSERT INTO MODELOS_ARMA(ID_CATEGORIA,NOMBRE) SELECT ID_CATEGORIA,'Sport Gloves' FROM CATEGORIAS_PRODUCTO WHERE NOMBRE='GUANTE';


-- Ejemplo: varias skins por modelo

INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Asiimov','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='AWP';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Dragon Lore','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='AWP';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Neo-Noir','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='M4A4';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Desolate Space','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='M4A1-S';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Mecha Industries','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='M4A1-S';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Golden Coil','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='M4A1-S';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Bullet Rain','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='M4A4';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Vulcan','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='AK-47';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Fire Serpent','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='AK-47';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Case Hardened','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Five-Seven';

-- Pistolas
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Cortex','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='GLOCK-18';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Water Elemental','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='GLOCK-18';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Cyrex','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='USP-S';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Kill Confirmed','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='USP-S';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Blaze','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Desert Eagle';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Kumicho Dragon','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Desert Eagle';

-- Cuchillos
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Crimson Web','KNIFE' FROM MODELOS_ARMA WHERE NOMBRE='Karambit';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Doppler','KNIFE' FROM MODELOS_ARMA WHERE NOMBRE='Karambit';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Marble Fade','KNIFE' FROM MODELOS_ARMA WHERE NOMBRE='M9 Bayonet';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Lore','KNIFE' FROM MODELOS_ARMA WHERE NOMBRE='M9 Bayonet';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Autotronic','KNIFE' FROM MODELOS_ARMA WHERE NOMBRE='Bayonet';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Gamma Doppler','KNIFE' FROM MODELOS_ARMA WHERE NOMBRE='Butterfly Knife';

-- Guantes
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Vice','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Sport Gloves';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Pandora''s Box','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Sport Gloves';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Emerald Web','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Moto Gloves';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Slaughter','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Driver Gloves';
INSERT INTO SKINS(ID_MODELO,NOMBRE,RAREZA) SELECT ID_MODELO,'Cobalt Skulls','COVERT' FROM MODELOS_ARMA WHERE NOMBRE='Specialist Gloves';


INSERT INTO USUARIOS(USERNAME,EMAIL,PASS_HASH,PAIS,NIVEL_KYC) VALUES('vendedor01','vendedor01@mail.com','hash...','CL',1);
INSERT INTO USUARIOS(USERNAME,EMAIL,PASS_HASH,PAIS,NIVEL_KYC) VALUES('comprador01','comprador01@mail.com','hash...','CL',1);

INSERT INTO REGLAS_COMISION(PORCENTAJE,ACTIVA,VIGENTE_DESDE) VALUES(5,'S',TRUNC(SYSDATE)-1);

INSERT INTO ARTICULOS(ID_SKIN,ID_DUENIO,DESGASTE,EXTERIOR,ES_STATTRAK,ES_SOUVENIR,INDICE_PATRON,NOMBRE_ETIQUETA)
SELECT s.ID_SKIN,(SELECT ID_USUARIO FROM USUARIOS WHERE USERNAME='vendedor01'),0.12,'MINIMAL WEAR','S','N',321,'RED BOOM'
FROM SKINS s WHERE s.NOMBRE='Redline';

COMMIT;

/* ============================================================================
   EJEMPLOS DE USO (procedimientos/funciones)
============================================================================ */
-- 1) Publicar un artículo (precio en CLP)
-- BEGIN PKG_MERCADO.P_PUBLICAR_ARTICULO(
--   p_id_vendedor => (SELECT ID_USUARIO FROM USUARIOS WHERE USERNAME='vendedor01'),
--   p_id_articulo => (SELECT ID_ARTICULO FROM ARTICULOS WHERE NOMBRE_ETIQUETA='RED BOOM'),
--   p_precio_clp  => 120000
-- ); END; /

-- 2) Depositar saldo al comprador (prueba)
-- UPDATE BILLETERA_USUARIO SET SALDO_CLP=200000 WHERE ID_USUARIO=(SELECT ID_USUARIO FROM USUARIOS WHERE USERNAME='comprador01');
-- INSERT INTO MOVIMIENTOS_BILLETERA(ID_USUARIO,TIPO,MONTO_CLP,REF_TX) VALUES((SELECT ID_USUARIO FROM USUARIOS WHERE USERNAME='comprador01'),'DEPOSITO',200000,'MANUAL');
-- COMMIT;

-- 3) Comprar publicación
-- BEGIN PKG_MERCADO.P_COMPRAR_PUBLICACION(
--   p_id_comprador  => (SELECT ID_USUARIO FROM USUARIOS WHERE USERNAME='comprador01'),
--   p_id_publicacion=> (SELECT ID_PUBLICACION FROM PUBLICACIONES WHERE ESTADO='ACTIVA' FETCH FIRST 1 ROWS ONLY)
-- ); END; /

-- 4) Función auxiliar (exterior desde desgaste)
-- SELECT PKG_MERCADO.F_EXTERIOR_DESDE_DESGASTE(0.11) AS EXTERIOR FROM DUAL;

/* =========================================================================
   - RECORD y VARRAY
   - Cursores con y sin parámetros (loops anidados)
   - Excepciones predefinidas y personalizadas
============================================================================ 
-- RECORD + VARRAY: Top N skins más listadas
DECLARE
  TYPE t_skin_rank IS RECORD(id_skin NUMBER, nombre VARCHAR2(100), total NUMBER);
  TYPE t_arr_skin_rank IS VARRAY(10) OF t_skin_rank;

  v_top   t_arr_skin_rank := t_arr_skin_rank(); -- constructor
  v_elem  t_skin_rank;                           -- record temporal
  v_cnt   PLS_INTEGER := 0;

  CURSOR c_top IS
    SELECT s.ID_SKIN, s.NOMBRE, COUNT(*) total
      FROM PUBLICACIONES p
      JOIN ARTICULOS a ON a.ID_ARTICULO = p.ID_ARTICULO
      JOIN SKINS s     ON s.ID_SKIN     = a.ID_SKIN
     WHERE p.ESTADO = 'ACTIVA'
     GROUP BY s.ID_SKIN, s.NOMBRE
     ORDER BY total DESC;
BEGIN
  -- Semilla opcional
  v_elem.id_skin := NULL; v_elem.nombre := 'Inicial'; v_elem.total := 0;
  v_top.EXTEND; v_top(1) := v_elem;

  OPEN c_top;
  LOOP
    FETCH c_top INTO v_elem.id_skin, v_elem.nombre, v_elem.total;
    EXIT WHEN c_top%NOTFOUND OR v_cnt >= 9; -- máx 9 más (varray límite 10)
    v_cnt := v_cnt + 1;
    v_top.EXTEND;
    v_top(v_top.COUNT) := v_elem;
  END LOOP;
  CLOSE c_top;

  DBMS_OUTPUT.PUT_LINE('Top listados (hasta 10):');
  FOR i IN 1..v_top.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(NVL(v_top(i).nombre,'(seed)')||' -> '||v_top(i).total);
  END LOOP;
EXCEPTION
  WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('No hay datos.');
  WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: '||SQLERRM);
END;
/


-- Cursor CON parámetro + loops anidados: publicaciones por categoría y modelo
DECLARE
  CURSOR c_categorias IS
    SELECT ID_CATEGORIA, NOMBRE FROM CATEGORIAS_PRODUCTO;

  CURSOR c_modelos(p_id_cat NUMBER) IS
    SELECT ID_MODELO, NOMBRE FROM MODELOS_ARMA
     WHERE ID_CATEGORIA = p_id_cat;

  v_total_cat NUMBER;
BEGIN
  FOR cat IN c_categorias LOOP
    v_total_cat := 0;
    DBMS_OUTPUT.PUT_LINE('Categoría: '||cat.NOMBRE);

    FOR v_mod IN c_modelos(cat.ID_CATEGORIA) LOOP
      DECLARE
        v_cnt NUMBER;
      BEGIN
        SELECT COUNT(*)
          INTO v_cnt
          FROM PUBLICACIONES p
          JOIN ARTICULOS a ON a.ID_ARTICULO = p.ID_ARTICULO
          JOIN SKINS s     ON s.ID_SKIN     = a.ID_SKIN
         WHERE p.ESTADO = 'ACTIVA'
           AND s.ID_MODELO = v_mod.ID_MODELO;

        v_total_cat := v_total_cat + v_cnt;
        DBMS_OUTPUT.PUT_LINE('  Modelo '||v_mod.NOMBRE||': '||v_cnt||' publicaciones');
      END;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Total categoría '||cat.NOMBRE||': '||v_total_cat);
  END LOOP;
END;
/



-- Excepciones personalizadas: intentar publicar artículo de otro usuario
DECLARE
  v_id_otro_art   ARTICULOS.ID_ARTICULO%TYPE;
  v_id_comprador  USUARIOS.ID_USUARIO%TYPE;
BEGIN
  -- Tomamos un artículo existente (que NO pertenece al comprador)
  SELECT MIN(ID_ARTICULO) INTO v_id_otro_art FROM ARTICULOS;

  -- Obtenemos el ID del usuario 'comprador01'
  SELECT ID_USUARIO INTO v_id_comprador
  FROM USUARIOS
  WHERE USERNAME = 'comprador01';

  -- Intentamos publicar con el comprador (debería lanzar e_no_duenio)
  BEGIN
    PKG_MERCADO.P_PUBLICAR_ARTICULO(
      p_id_vendedor => v_id_comprador,
      p_id_articulo => v_id_otro_art,
      p_precio_clp  => 99999
    );
    DBMS_OUTPUT.PUT_LINE('No lanzó excepción (revisar que el artículo no sea del comprador).');
  EXCEPTION
    WHEN PKG_MERCADO.e_no_duenio THEN
      DBMS_OUTPUT.PUT_LINE('OK: excepción de dueño capturada.');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Otra excepción: '||SQLERRM);
  END;
END;
/

*/

